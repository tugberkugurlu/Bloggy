@model Bloggy.Client.Web.ViewModels.BlogPostPageViewModel
@{
    ViewBag.Title = Model.BlogPost.Title;
}

<div class="single-blog-post">
    
    @* Comment Post Result *@
    <div class="row">
        <div class="col-sm-12">
            @{
                bool result;
                if (ViewBag.IsCommentSuccess != null && bool.TryParse(ViewBag.IsCommentSuccess.ToString(), out result) && result)
                {
                    <div class="alert alert-success">
                        Gratz! Your comment has been posted successfully!
                    </div>
                }
            }
            @Html.ValidationSummary(false)
        </div>
    </div>
    
    @* Comment Post *@
    @Html.Partial("_BlogPostListItemPartial", Model.BlogPost)
    
    @* Social Buttons *@
    <div>
        <ul class="none-style-list inline-list social-share-list">
            <li>
                <div class="fb-share-button" data-href="http://developers.facebook.com/docs/plugins/" data-type="button_count"></div>
            </li>
            <li>
                <a href="https://twitter.com/share" class="twitter-share-button" data-via="tourismgeek" data-related="tourismgeek">Tweet</a>
            </li>
        </ul>
    </div>

    @* Comments List *@
    @if (Model.Comments.Any())
    {
        <div class="comment-list-container blog-post-comment-list-container">
            <div class="row">
                <div class="col-sm-12">
                    <h3>@StringResources.Comments</h3>
                </div>
            </div>
            @foreach (var comment in Model.Comments)
            {
                <div class="row">
                    <div class="col-sm-12">
                        <div class="comment-container blog-post-comment-container @if(comment.IsByAuthor){<text>comment-container-by-author</text>}">
                            <div class="comment-gravatar-container">
                                <div class="hidden-xs">
                                    <img src="@string.Format("http://www.gravatar.com/avatar/{0}?s={1}&d=identicon", comment.GravatarHash, 80)" alt="@comment.Name" />
                                </div>
                                <div class="visible-xs">
                                    <img src="@string.Format("http://www.gravatar.com/avatar/{0}?s={1}&d=identicon", comment.GravatarHash, 60)" alt="@comment.Name" />
                                </div>
                            </div>
                            <div class="comment-content-container">
                                <div class="comment-content-header">
                                    @if (!string.IsNullOrWhiteSpace(comment.Url))
                                    {
                                        @:<strong>by</strong> <a href="@comment.Url">@comment.Name</a>
                                    }
                                    else
                                    {
                                        @:<strong>by</strong> @comment.Name
                                    }
                                    <strong>on</strong> @comment.CreatedOn.ToString("dddd, MMM dd yyyy HH:mm:ss zzz")
                                </div>
                                <div class="comment-content">
                                    @Html.Raw(comment.Content)
                                </div>
                            </div>
                            <div class="clearfix"></div>
                        </div>
                    </div>

                </div>
            }
        </div>   
    }

    @* Comment Form *@
    @if (Model.BlogPost.AllowComments)
    {
        <div>
            <h3>@StringResources.PostNewComment</h3>
            @using (Html.BeginForm("Index", "BlogPost", new { slug = Request.RequestContext.RouteData.Values["slug"] }, FormMethod.Post, new { role = "form" }))
            {
                @Html.AntiForgeryToken()

                @Html.Partial("_CommentFormPartial", Model.CommentPostRequestModel, new ViewDataDictionary { { "CommentType", "post" } })
            }
        </div>
    }
</div>